{{- /*
Copyright 2024-2025 New Vector Ltd

SPDX-License-Identifier: AGPL-3.0-only
*/ -}}
{{- with .Values.elementWeb -}}
{{- if .enabled -}}
apiVersion: apps/v1
kind: Deployment
metadata:
{{- with .annotations }}
  annotations:
    {{- toYaml . | nindent 4 }}
{{- end }}
  labels:
    {{- include "element-io.element-web.labels" (dict "root" $ "context" .) | nindent 4 }}
    k8s.element.io/element-web-config-hash: "{{( include "element-io.element-web.configmap-data" (dict "root" $ "context" .)) | sha1sum }}"
    k8s.element.io/nginx-config-hash: "{{ include "element-io.element-web.nginx-configmap-data" (dict "root" $) | sha1sum }}"
  name: {{ $.Release.Name }}-element-web
  namespace: {{ $.Release.Namespace }}
spec:
  replicas: {{ .replicas }}
  selector:
    matchLabels:
      app.kubernetes.io/instance: {{ $.Release.Name }}-element-web
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 2
  template:
    metadata:
      labels:
        {{- include "element-io.element-web.labels" (dict "root" $ "context" (dict "image" .image "labels" .labels "withChartVersion" false)) | nindent 8 }}
        k8s.element.io/element-web-config-hash: "{{( include "element-io.element-web.configmap-data" (dict "root" $ "context" .)) | sha1sum }}"
        k8s.element.io/nginx-config-hash: "{{ include "element-io.element-web.nginx-configmap-data" (dict "root" $) | sha1sum }}"
{{- with .annotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
{{- end }}
    spec:
{{- if gt (.replicas | int) 1 }}
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app.kubernetes.io/instance
                  operator: In
                  values:
                  - "{{ $.Release.Name }}-element-web"
              topologyKey: kubernetes.io/hostname
{{- end }}
{{- include "element-io.ess-library.pods.commonSpec" (dict "root" $ "context" (dict "componentValues" . "instanceSuffix" "element-web" "deployment" true)) | nindent 6 }}
      containers:
      - name: element-web
{{- with .image -}}
{{- if .digest }}
        image: "{{ .registry }}/{{ .repository }}@{{ .digest }}"
        imagePullPolicy: {{ .pullPolicy | default "IfNotPresent" }}
{{- else }}
        image: "{{ .registry }}/{{ .repository }}:{{ required "elementWeb.image.tag is required if no digest" .tag }}"
        imagePullPolicy: {{ .pullPolicy | default "Always" }}
{{- end }}
{{- end }}
        env:
        {{- include "element-io.element-web.env" (dict "root" $ "context" .) | nindent 10 }}
{{- with .containersSecurityContext }}
        securityContext:
          {{- toYaml . | nindent 10 }}
{{- end }}
        ports:
        - containerPort: 8080
          name: element
          protocol: TCP
        livenessProbe:
          failureThreshold: 3
          httpGet:
            path: /health
            port: element
            scheme: HTTP
          periodSeconds: 10
        readinessProbe:
          failureThreshold: 3
          httpGet:
            path: /health
            port: element
            scheme: HTTP
          periodSeconds: 3
        startupProbe:
          failureThreshold: 3
          httpGet:
            path: /health
            port: element
            scheme: HTTP
          initialDelaySeconds: 2
          periodSeconds: 3
{{- with .resources }}
        resources:
          {{- toYaml . | nindent 10 }}
{{- end }}
        volumeMounts:
        - mountPath: /app/config.json
          name: config
          readOnly: true
          subPath: config.json
        - mountPath: /etc/nginx/conf.d/default.conf
          name: nginx-config
          readOnly: true
          subPath: default.conf
        - mountPath: /etc/nginx/conf.d/http_customisations.conf
          name: nginx-config
          readOnly: true
          subPath: http_customisations.conf
        - mountPath: /etc/nginx/security_headers.conf
          name: nginx-config
          readOnly: true
          subPath: security_headers.conf
        - mountPath: /tmp
          name: nginx-tmp
      restartPolicy: Always
      volumes:
      - configMap:
          defaultMode: 420
          name: {{ $.Release.Name }}-element-web
        name: config
      - configMap:
          defaultMode: 420
          name: {{ $.Release.Name }}-element-web-nginx
        name: nginx-config
      - emptyDir:
          medium: Memory
        name: nginx-tmp
{{- end }}
{{- end }}

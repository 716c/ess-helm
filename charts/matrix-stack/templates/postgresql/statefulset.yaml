{#
Copyright 2023 New Vector Ltd

SPDX-License-Identifier: LicenseRef-EnterpriseEdition
#}

---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  labels:
    {{- include "element-io.postgresql.labels" (dict "root" $ "context" .) | nindent 4 }}
  name: {{ $.Release.Name }}-postgresql-data
  namespace: {{ $.Release.Namespace }}
  annotations:
    k8s.element.io/confighash: "{{ include (print $.Template.BasePath "/postgresql/secret.yaml") $ | sha1sum }}"
    k8s.element.io/logconfighash: "{{ include (print $.Template.BasePath "/postgresql/configmap.yaml") $ | sha1sum }}"
spec:
  serviceName: {{ $.Release.Name }}-synapse-{{ $processType }}
  replicas: {{ .instances | default 1 }}
  selector:
    matchLabels:
      app.kubernetes.io/instance: {{ $.Release.Name }}-synapse-{{ $processType }}
  updateStrategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        {{- include "element-io.postgresql.labels" (dict "root" $ "context" .) | nindent 8 }}
      annotations:
        k8s.element.io/confighash: "{{ include (print $.Template.BasePath "/postgresql/secret.yaml") $ | sha1sum }}"
        k8s.element.io/logconfighash: "{{ include (print $.Template.BasePath "/postgresql/configmap.yaml") $ | sha1sum }}"
{{- with .annotations }}
        {{- toYaml . | nindent 8 }}
{{- end }}
    spec:
{{- include "element-io.ess-library.pods.commonSpec" (dict "root" $ "context" (dict "componentValues" . "key" "postgresql" "deployment" false)) | nindent 6 }}
      containers:
      - name: postgresql
{{- with .image -}}
{{- if .digest }}
        image: "{{ .registry }}/{{ .repository }}@{{ .digest }}"
        imagePullPolicy: {{ .pullPolicy | default "IfNotPresent" }}
{{- else }}
        image: "{{ .registry }}/{{ .repository }}:{{ .tag }}"
        imagePullPolicy: {{ .pullPolicy | default "Always" }}
{{- end }}
{{- end }}
{{- with .containersSecurityContext }}
        securityContext:
          {{- toYaml . | nindent 10 }}
{{- end }}
        args:
        - -c
        - max_connections={{ ((memory_limits_mb / 16) | int) }}
        - -c
        - shared_buffers={{ ((memory_limits_mb / 4) | int) }}MB
        - -c
        - effective_cache_size={{ memory_limits_mb - 256 }}MB
{{- with .resources }}
        resources:
          {{- toYaml . | nindent 10 }}
{{- end }}
        lifecycle:
          preStop:
            exec:
              command: ["pg_ctl", "stop", "-D", "/var/lib/postgresql/data", "-w", "-t", "55", "-m", "fast"]
        readinessProbe:
          exec:
            command: ["psql", "-w", "-U", "{{ postgres_in_cluster.user }}", "-d", "{{ postgres_in_cluster.db }}", "-c", "SELECT 1"]
          initialDelaySeconds: 15
          timeoutSeconds: 2
        livenessProbe:
          exec:
            command: ["psql", "-w", "-U", "{{ postgres_in_cluster.user }}", "-d", "{{ postgres_in_cluster.db }}", "-c", "SELECT 1"]
          initialDelaySeconds: 45
          timeoutSeconds: 2
        ports:
        - containerPort: 5432
          name: postgres
        volumeMounts:
        - name: database
          mountPath: /var/lib/postgresql/data
      - name: postgres-init-password
{{- with .image -}}
{{- if .digest }}
        image: "{{ .registry }}/{{ .repository }}@{{ .digest }}"
        imagePullPolicy: {{ .pullPolicy | default "IfNotPresent" }}
{{- else }}
        image: "{{ .registry }}/{{ .repository }}:{{ .tag }}"
        imagePullPolicy: {{ .pullPolicy | default "Always" }}
{{- end }}
{{- end }}
{{- with .containersSecurityContext }}
        securityContext:
          {{- toYaml . | nindent 10 }}
{{- end }}
        command:
        - /bin/sh
        - -c
        - >
          POSTGRES_ADMIN_PASSWORD=`cat /secrets/ADMIN_PASSWORD`
          POSTGRES_ESS_PASSWORD=`cat /secrets/ADMIN_PASSWORD`
          while ! pg_isready -h localhost; do echo "Postgres not yet ready"; sleep 1; done;
          echo "Postgres now ready, so changing password";
          psql -w -U postgres -h localhost \
            -c "ALTER USER ess_user PASSWORD '$ESS_PASSWORD';" ;
          trap : TERM INT; sleep 9999999999d & wait
      - name: postgres-exporter
{{- with .image -}}
{{- if .digest }}
        image: "{{ .registry }}/{{ .repository }}@{{ .digest }}"
        imagePullPolicy: {{ .pullPolicy | default "IfNotPresent" }}
{{- else }}
        image: "{{ .registry }}/{{ .repository }}:{{ .tag }}"
        imagePullPolicy: {{ .pullPolicy | default "Always" }}
{{- end }}
{{- end }}
{{- with .containersSecurityContext }}
        securityContext:
          {{- toYaml . | nindent 10 }}
{{- end }}
        ports:
        - name: metrics
          containerPort: 9187
        env:
        - name: DATA_SOURCE_URI
          value: "postgres?sslmode=disable"
        - name: DATA_SOURCE_USER
          value: "postgres"
        - name: PG_EXPORTER_METRIC_PREFIX
          value: metrics
        resources:
          limits:
            cpu: "1"
            memory: 500Mi
          requests:
            cpu: 100m
            memory: 100Mi
      terminationGracePeriodSeconds: 60
      volumes:
      - name: database
        persistentVolumeClaim:
          claimName: {{ $.Release.Name }}-postgresql-data

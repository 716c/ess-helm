{{- /*
Copyright 2024 New Vector Ltd

SPDX-License-Identifier: AGPL-3.0-only OR LicenseRef-Element-Commercial
*/ -}}

{{- with .Values.synapse -}}
{{- if and .enabled .checkConfigHook.enabled -}}
{{- $enabledWorkers := (include "element-io.synapse.enabledWorkers" (dict "root" $)) | fromJson }}
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ $.Release.Name }}-synapse-check-config
  namespace: {{ $.Release.Namespace }}
  annotations:
    "helm.sh/hook": pre-install,pre-upgrade
    "helm.sh/hook-delete-policy": before-hook-creation
{{- with .checkConfigHook.annotations }}
    {{- toYaml . | nindent 4 }}
{{- end }}
  labels:
    {{- include "element-io.init-secrets.labels" (dict "root" $ "context" .) | nindent 4 }}
spec:
  backoffLimit: 6
  completionMode: NonIndexed
  completions: 1
  manualSelector: false
  parallelism: 1
  podReplacementPolicy: TerminatingOrFailed
  template:
    metadata:
      annotations:
{{- with .annotations }}
        {{- toYaml . | nindent 8 }}
{{- end }}
      labels:
        {{- include "element-io.init-secrets.labels" (dict "root" $ "context" .) | nindent 8 }}
    spec:
      restartPolicy: OnFailure
      automountServiceAccountToken: true
      serviceAccountName: {{ include "element-io.ess-library.serviceAccountName" (dict "root" $ "context" (dict "serviceAccount" .serviceAccount "key" "init-secrets")) }}
{{- include "element-io.ess-library.pods.pullSecrets" (dict "root" $ "context" (dict "pullSecrets" $.Values.matrixTools.image.pullSecrets "usesMatrixTools" true)) | nindent 6 }}
{{- with .podSecurityContext }}
      securityContext:
        {{- toYaml . | nindent 8 }}
{{- end }}
{{- with .nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
{{- end }}
{{- /*
We have an init container to render & merge the config for several reasons:
* We have external, user-supplied Secrets and don't want to use `lookup` as that doesn't work with things like ArgoCD
* We want to treat credentials provided in Helm the same as credentials in external Secrets
* We want to guarantee the order the YAML files are merged and while we can code to Synapse's current behavour that may change
* We could do this all in the main Synapse container but then there's potential confusion between `/config-templates`, `/conf` in the image and `/conf` the `emptyDir`
*/}}
      initContainers:
      - name: render-config
{{- with $.Values.matrixTools.image -}}
{{- if .digest }}
        image: "{{ .registry }}/{{ .repository }}@{{ .digest }}"
        imagePullPolicy: {{ .pullPolicy | default "IfNotPresent" }}
{{- else }}
        image: "{{ .registry }}/{{ .repository }}:{{ required "matrixTools.image.tag is required if no digest" .tag }}"
        imagePullPolicy: {{ .pullPolicy | default "Always" }}
{{- end }}
{{- end }}
{{- with .containersSecurityContext }}
        securityContext:
          {{- toYaml . | nindent 10 }}
{{- end }}
        command:
        - "/matrix-tools"
        - render-config
        - -output
        - /conf/homeserver.yaml
        - /config-templates/01-homeserver-underrides.yaml
          {{- range $key := (.additional | keys | uniq | sortAlpha) -}}
          {{- $prop := index $.Values.synapse.additional $key }}
          {{- if $prop.config }}
        - /secrets/{{ $.Release.Name }}-synapse/user-{{ $key }}
          {{- end }}
          {{- if $prop.configSecret }}
        - /secrets/{{ tpl $prop.configSecret $ }}/{{ $prop.configSecretKey }}
          {{- end }}
          {{- end }}
        - /config-templates/04-homeserver-overrides.yaml
        - /config-templates/05-main.yaml
        env:
          {{- include "element-io.synapse.matrixToolsEnv" (dict "root" $ "context" .) | nindent 10 }}
          {{- include "element-io.synapse.env" (dict "root" $ "context" .) | nindent 10 }}
{{- with .resources }}
        resources:
          {{- toYaml . | nindent 10 }}
{{- end }}
        volumeMounts:
        - mountPath: /config-templates
          name: plain-config
          readOnly: true
{{- range $secret := include "element-io.synapse.configSecrets" (dict "root" $ "context" .) | fromJsonArray }}
        - mountPath: /secrets/{{ tpl $secret $ }}
          name: "secret-{{ tpl $secret $ }}"
          readOnly: true
{{- end }}
        - mountPath: /conf
          name: rendered-config
          readOnly: false
      containers:
      - name: synapse
{{- with .image -}}
{{- if .digest }}
        image: "{{ .registry }}/{{ .repository }}@{{ .digest }}"
        imagePullPolicy: {{ .pullPolicy | default "IfNotPresent" }}
{{- else }}
        image: "{{ .registry }}/{{ .repository }}:{{ .tag }}"
        imagePullPolicy: {{ .pullPolicy | default "Always" }}
{{- end }}
{{- end }}
{{- with .containersSecurityContext }}
        securityContext:
          {{- toYaml . | nindent 10 }}
{{- end }}
        command:
        - "python3"
        - "-m"
        - "synapse.config"
        - "-c"
        - /conf/homeserver.yaml
        env:
          {{- include "element-io.synapse.pythonEnv" (dict "root" $ "context" .) | nindent 10 }}
          {{- include "element-io.synapse.env" (dict "root" $ "context" .) | nindent 10 }}
{{- with .resources }}
        resources:
          {{- toYaml . | nindent 10 }}
{{- end }}
        volumeMounts:
{{- range $secret := include "element-io.synapse.configSecrets" (dict "root" $ "context" .) | fromJsonArray }}
        - mountPath: /secrets/{{ tpl $secret $ }}
          name: "secret-{{ tpl $secret $ }}"
          readOnly: true
{{- end }}
{{- range $appservice := .appservices }}
        - name: {{ tpl $appservice.registrationFileConfigMap $ }}
          mountPath: /as/{{ tpl $appservice.registrationFileConfigMap $ }}/registration.yaml
          readOnly: true
          subPath: registration.yaml
{{- end }}
        - mountPath: /conf/log_config.yaml
          name: plain-config
          subPath: log_config.yaml
          readOnly: false
        - mountPath: /media
          name: media
          readOnly: false
        - mountPath: /conf
          name: rendered-config
          readOnly: false
        - mountPath: /tmp
          name: tmp
          readOnly: false
      volumes:
      - configMap:
          defaultMode: 420
          name: "{{ $.Release.Name }}-synapse"
        name: plain-config
{{- range $secret := include "element-io.synapse.configSecrets" (dict "root" $ "context" .) | fromJsonArray }}
      - secret:
          secretName: {{ tpl $secret $ }}
        name: secret-{{ tpl $secret $ }}
{{- end }}
      - emptyDir:
          medium: Memory
        name: "media"
      - emptyDir:
          medium: Memory
        name: "rendered-config"
{{- range $appservice := .appservices }}
      - configMap:
          defaultMode: 420
          name: "{{ tpl $appservice.registrationFileConfigMap $ }}"
        name: {{ tpl $appservice.registrationFileConfigMap $ }}
{{- end }}
      - emptyDir:
          medium: Memory
        name: "tmp"
---
{{- end }}
{{- end }}

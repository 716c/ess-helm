{{- /*
Copyright 2024 New Vector Ltd

SPDX-License-Identifier: AGPL-3.0-only OR LicenseRef-Element-Commercial
*/ -}}

{{- with .Values.synapse -}}
{{- if .enabled -}}
{{- $enabledWorkers := (include "element-io.synapse.enabledWorkers" (dict "root" $)) | fromJson }}
{{- range $processType, $unmergedProcessDetails := merge $enabledWorkers (dict "main" dict) }}
{{- $perProcessRoot := merge (dict "processType" $processType "isHook" false) $.Values.synapse }}
{{- with (merge dict ($unmergedProcessDetails | deepCopy) ($.Values.synapse | deepCopy)) }}
apiVersion: apps/v1
kind: StatefulSet
metadata:
{{- with .annotations }}
  annotations:
    {{- toYaml . | nindent 4 }}
{{- end }}
  labels:
    {{- include "element-io.synapse.process.labels" (dict "root" $ "context" $perProcessRoot) | nindent 4 }}
    k8s.element.io/confighash: "{{ include (print $.Template.BasePath "/synapse/synapse_secret.yaml") $ | sha1sum }}"
    k8s.element.io/logconfighash: "{{ include (print $.Template.BasePath "/synapse/synapse_configmap.yaml") $ | sha1sum }}"
{{- range $index, $appservice := .appservices }}
    k8s.element.io/as-registration-{{ $index }}-hash: "{{ (lookup "v1" "ConfigMap" $.Release.Namespace $appservice.registrationFileConfigMap) | toJson | sha1sum }}"
{{- end }}
  name: {{ $.Release.Name }}-synapse-{{ $processType }}
  namespace: {{ $.Release.Namespace }}
spec:
  serviceName: {{ $.Release.Name }}-synapse-{{ $processType }}
  replicas: {{ .replicas | default 1 }}
  selector:
    matchLabels:
      app.kubernetes.io/instance: {{ $.Release.Name }}-synapse-{{ $processType }}
  updateStrategy:
    type: RollingUpdate
  # Without this CrashLoopBackoffs due to config failures block pod recreation
  podManagementPolicy: Parallel
  {{- include "element-io.synapse.pod-template" (dict "root" $ "context" $perProcessRoot) | nindent 2 }}
---
{{- end }}
{{- end }}
{{- end }}
{{- end -}}

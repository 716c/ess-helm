{{- /*
Copyright 2025 New Vector Ltd

SPDX-License-Identifier: AGPL-3.0-only
*/ -}}

{{- with .Values.matrixAuthenticationService -}}
{{- if .enabled -}}
apiVersion: apps/v1
kind: Deployment
metadata:
{{- with .annotations }}
  annotations:
    {{- toYaml . | nindent 4 }}
{{- end }}
  labels:
    {{- include "element-io.matrix-authentication-service.labels" (dict "root" $ "context" .) | nindent 4 }}
    k8s.element.io/matrix-authentication-service-config-hash: {{ include "element-io.matrix-authentication-service.configmap-data" (dict "root" $ "context" .) | sha1sum }}
    k8s.element.io/matrix-authentication-service-secret-hash: {{ include "element-io.matrix-authentication-service.secret-data" (dict "root" $ "context" .) | sha1sum }}
    {{ include "element-io.ess-library.postgres-label" (dict "root" $ "context" (dict
                                                            "essPassword" "matrixAuthenticationService"
                                                            "postgresProperty" .postgres
                                                            )
                                        ) }}
  name: {{ $.Release.Name }}-matrix-authentication-service
  namespace: {{ $.Release.Namespace }}
spec:
  replicas: {{ .replicas }}
  selector:
    matchLabels:
      app.kubernetes.io/instance: "{{ $.Release.Name }}-matrix-authentication-service"
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 2
  template:
    metadata:
      labels:
        {{- include "element-io.matrix-authentication-service.labels" (dict "root" $ "context" (dict "image" .image "labels" .labels "withChartVersion" false)) | nindent 8 }}
        k8s.element.io/matrix-authentication-service-config-hash: "{{ include "element-io.matrix-authentication-service.configmap-data" (dict "root" $ "context" .) | sha1sum }}"
        k8s.element.io/matrix-authentication-service-secret-hash: "{{ include "element-io.matrix-authentication-service.secret-data" (dict "root" $ "context" .) | sha1sum }}"
        {{ include "element-io.ess-library.postgres-label" (dict "root" $ "context" (dict
                                                                "essPassword" "matrixAuthenticationService"
                                                                "postgresProperty" .postgres
                                                                )
                                            ) }}
{{- with .annotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
{{- end }}
    spec:
{{- if gt (.replicas | int) 1 }}
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
              - key: app.kubernetes.io/instance
                operator: In
                values:
                - "{{ $.Release.Name }}-matrix-authentication-service"
            topologyKey: kubernetes.io/hostname
{{- end }}
{{- include "element-io.ess-library.pods.commonSpec" (dict "root" $ "context" (dict "componentValues" . "instanceSuffix" "matrix-authentication-service" "deployment" true "usesMatrixTools" true)) | nindent 6 }}
      initContainers:
      - name: render-config
{{- with $.Values.matrixTools.image -}}
{{- if .digest }}
        image: "{{ .registry }}/{{ .repository }}@{{ .digest }}"
        imagePullPolicy: {{ .pullPolicy | default "IfNotPresent" }}
{{- else }}
        image: "{{ .registry }}/{{ .repository }}:{{ required "synapse.image.tag is required if no digest" .tag }}"
        imagePullPolicy: {{ .pullPolicy | default "Always" }}
{{- end }}
{{- end }}
{{- with .containersSecurityContext }}
        securityContext:
          {{- toYaml . | nindent 10 }}
{{- end }}
        command:
        - "/matrix-tools"
        - render-config
        - -output
        - /conf/config.yaml
          {{- range $key := (.additional | keys | uniq | sortAlpha) -}}
          {{- $prop := index $.Values.matrixAuthenticationService.additional $key }}
          {{- if $prop.config }}
        - /secrets/{{ $.Release.Name }}-matrix-authentication-service/user-{{ $key }}
          {{- end }}
          {{- if $prop.configSecret }}
        - /secrets/{{ tpl $prop.configSecret $ }}/{{ $prop.configSecretKey }}
          {{- end }}
          {{- end }}
        - /config-templates/config.yaml
        env:
        {{- include "element-io.matrix-authentication-service.matrixToolsEnv" (dict "root" $ "context" .) | nindent 8 }}
        {{- include "element-io.matrix-authentication-service.env" (dict "root" $ "context" .) | nindent 8 }}
{{- with .resources }}
        resources:
          {{- toYaml . | nindent 10 }}
{{- end }}
        volumeMounts:
        - mountPath: /config-templates
          name: plain-config
          readOnly: true
{{- range $secret := include "element-io.matrix-authentication-service.configSecrets" (dict "root" $ "context" .) | fromJsonArray }}
        - mountPath: /secrets/{{ tpl $secret $ }}
          name: "secret-{{ tpl $secret $ }}"
          readOnly: true
{{- end }}
        - mountPath: /conf
          name: rendered-config
          readOnly: false
      - name: db-wait
{{- with $.Values.matrixTools.image -}}
{{- if .digest }}
        image: "{{ .registry }}/{{ .repository }}@{{ .digest }}"
        imagePullPolicy: {{ .pullPolicy | default "IfNotPresent" }}
{{- else }}
        image: "{{ .registry }}/{{ .repository }}:{{ required "matrixTools.image.tag is required if no digest" .tag }}"
        imagePullPolicy: {{ .pullPolicy | default "Always" }}
{{- end }}
{{- end }}
{{- with .containersSecurityContext }}
        securityContext:
          {{- toYaml . | nindent 10 }}
{{- end }}
        command:
        - "/matrix-tools"
        - tcpwait
        - -address
        - {{ include "element-io.ess-library.postgres-host-port" (dict "root" $ "context" (dict "postgres" .postgres)) | quote }}
{{- with .resources }}
        resources:
          {{- toYaml . | nindent 10 }}
{{- end }}
      containers:
      - name: matrix-authentication-service
        args: ["server"]
{{- with .image -}}
{{- if .digest }}
        image: "{{ .registry }}/{{ .repository }}@{{ .digest }}"
        imagePullPolicy: {{ .pullPolicy | default "IfNotPresent" }}
{{- else }}
        image: "{{ .registry }}/{{ .repository }}:{{ required "matrixAuthenticationService.image.tag is required if no digest" .tag }}"
        imagePullPolicy: {{ .pullPolicy | default "Always" }}
{{- end }}
{{- end }}
{{- with .containersSecurityContext }}
        securityContext:
          {{- toYaml . | nindent 10 }}
{{- end }}
        env:
        {{- include "element-io.matrix-authentication-service.env" (dict "root" $ "context" .) | nindent 10 }}
        ports:
        - containerPort: 8080
          protocol: TCP
          name: http
        - containerPort: 8081
          protocol: TCP
          name: internal
{{- with .resources }}
        resources:
          {{- toYaml . | nindent 10 }}
{{- end }}
        startupProbe:
          httpGet:
            path: /health
            port: internal
            scheme: HTTP
          initialDelaySeconds: 5
        livenessProbe:
          failureThreshold: 3
          httpGet:
            path: /health
            port: internal
            scheme: HTTP
        readinessProbe:
          failureThreshold: 3
          httpGet:
            path: /health
            port: internal
            scheme: HTTP
        volumeMounts:
        - mountPath: "/config.yaml"
          name: rendered-config
          subPath: config.yaml
          readOnly: true
{{- range $secret := include "element-io.matrix-authentication-service.configSecrets" (dict "root" $ "context" .) | fromJsonArray }}
        - mountPath: /secrets/{{ tpl $secret $ }}
          name: "secret-{{ tpl $secret $ }}"
          readOnly: true
{{- end }}
      volumes:
      - emptyDir:
          medium: Memory
        name: "rendered-config"
      - name: plain-config
        configMap:
          name: {{ $.Release.Name }}-matrix-authentication-service
{{- range $secret := include "element-io.matrix-authentication-service.configSecrets" (dict "root" $ "context" .) | fromJsonArray }}
      - secret:
          secretName: {{ tpl $secret $ }}
        name: secret-{{ tpl $secret $ }}
{{- end }}
{{- end -}}
{{- end -}}

{#
Copyright 2024 New Vector Ltd

SPDX-License-Identifier: AGPL-3.0-only OR LicenseRef-Element-Commercial
#}

{% import 'sub_schema_values.yaml.j2' as sub_schema_values -%}
{% import 'synapse_sub_schema_values.yaml.j2' as synapse_sub_schema_values -%}
{{- sub_schema_values.generatedFileWarning() }}

{{- sub_schema_values.ess() }}

{{- sub_schema_values.postgresLibPQ() }}

synapse:
  enabled: true
  ## Configures the media store for Synapse
  media:
  {{- sub_schema_values.persistentVolumeClaim("storage") | indent(4) }}

  {{- sub_schema_values.credential("Key used to sign events and federation requests.\n## This needs to be the full signing key starting `ed25519 ...`", "signingKey") | indent(2) }}
  {{- sub_schema_values.credential("Shared Secret to registering users without having any users provisioned", "registrationSharedSecret") | indent(2) }}
  {{- sub_schema_values.credential("Secret used to sign Synapse issued tokens", "macaroon") | indent(2) }}

  ## Additional configuration to provide to all Synapse processes.
  ## This can be provided in-line in the Helm Chart and/or via an existing Secret
  ## e.g.
  ## additional:
  ##   config: |
  ##     allow_guest_access: true
  ##
  ## or
  ## additional:
  ##   configSecret: custom-synapse-config
  ##   configSecretKey: shared.yaml
  additional: {}

  ## Details of Application Service registration files to give to Synapse
  ## e.g.
  ## appservices:
  ## - registrationFileConfigMap: test-appservice
  appservices: []

  ## Additional Synapse processes managed by this chart
  ## e.g.
  ## workers:
  ##   client-reader:
  ##     instances: 2
  ##   event-creator: {}
  workers:
  {{- synapse_sub_schema_values.single_worker('appservice') | indent(4) }}
  {{- synapse_sub_schema_values.single_worker('background') | indent(4) }}
  {{- synapse_sub_schema_values.scalable_worker('client-reader') | indent(4) }}
  {{- synapse_sub_schema_values.single_worker('encryption') | indent(4) }}
  {{- synapse_sub_schema_values.scalable_worker('event-creator') | indent(4) }}
  {{- synapse_sub_schema_values.scalable_worker('event-persister') | indent(4) }}
  {{- synapse_sub_schema_values.scalable_worker('federation-reader') | indent(4) }}
  {{- synapse_sub_schema_values.scalable_worker('federation-sender') | indent(4) }}
  {{- synapse_sub_schema_values.scalable_worker('initial-synchrotron') | indent(4) }}
  {{- synapse_sub_schema_values.single_worker('media-repository') | indent(4) }}
  {{- synapse_sub_schema_values.single_worker('presence-writer') | indent(4) }}
  {{- synapse_sub_schema_values.scalable_worker('pusher') | indent(4) }}
  {{- synapse_sub_schema_values.single_worker('receipts-account') | indent(4) }}
  {{- synapse_sub_schema_values.scalable_worker('sliding-sync') | indent(4) }}
  {{- synapse_sub_schema_values.single_worker('sso-login') | indent(4) }}
  {{- synapse_sub_schema_values.scalable_worker('synchrotron') | indent(4) }}
  {{- synapse_sub_schema_values.single_worker('typing-persister') | indent(4) }}
  {{- synapse_sub_schema_values.single_worker('user-dir') | indent(4) }}

  ## Synapse's logging settings
  logging:
    ## The maximum level of Synapse log output before any overrides
    rootLevel: INFO

    ## Override the log level of specific loggers
    ## e.g.
    ## levelOverrides:
    ##   synapse.util.caches.lrucache: WARNING
    levelOverrides: {}
  {{- sub_schema_values.image(registry='docker.io', repository='matrixdotorg/synapse') | indent(2) }}
  {{- sub_schema_values.ingress() | indent(2) }}
  {{- sub_schema_values.labels() | indent(2) }}
  {{- sub_schema_values.workloadAnnotations() | indent(2) }}
  {{- sub_schema_values.containersSecurityContext() | indent(2) }}
  {{- sub_schema_values.extraEnv() | indent(2) }}
  {{- sub_schema_values.hostAliases() | indent(2) }}
  {{- sub_schema_values.nodeSelector() | indent(2) }}
  {{- sub_schema_values.podSecurityContext(user_id='10091', group_id='10091') | indent(2) }}
  {{- sub_schema_values.resources(requests_memory='100Mi', requests_cpu='100m', limits_memory='4Gi') | indent(2) }}
  {{- sub_schema_values.serviceAccount() | indent(2) }}
  {{- sub_schema_values.serviceMonitors() | indent(2) }}
  {{- sub_schema_values.tolerations() | indent(2) }}

  haproxy:
    replicas: 2
  {{- sub_schema_values.image(registry='docker.io', repository='library/haproxy', tag='3.0-alpine') | indent(4) }}
  {{- sub_schema_values.labels() | indent(4) }}
  {{- sub_schema_values.workloadAnnotations() | indent(4) }}
  {{- sub_schema_values.containersSecurityContext() | indent(4) }}
  {{- sub_schema_values.nodeSelector() | indent(4) }}
  {{- sub_schema_values.podSecurityContext(user_id='10001', group_id='10001') | indent(4) }}
  {{- sub_schema_values.resources(requests_memory='100Mi', requests_cpu='100m', limits_memory='200Mi') | indent(4) }}
  {{- sub_schema_values.serviceAccount() | indent(4) }}
  {{- sub_schema_values.serviceMonitors() | indent(4) }}
  {{- sub_schema_values.tolerations() | indent(4) }}

  redis:
  {{- sub_schema_values.image(registry='docker.io', repository='library/redis', tag='7.4-alpine') | indent(4) }}
  {{- sub_schema_values.labels() | indent(4) }}
  {{- sub_schema_values.workloadAnnotations() | indent(4) }}
  {{- sub_schema_values.containersSecurityContext() | indent(4) }}
  {{- sub_schema_values.nodeSelector() | indent(4) }}
  {{- sub_schema_values.podSecurityContext(user_id='10002', group_id='10002') | indent(4) }}
  {{- sub_schema_values.resources(requests_memory='50Mi', requests_cpu='50m', limits_memory='50Mi') | indent(4) }}
  {{- sub_schema_values.serviceAccount() | indent(4) }}
  {{- sub_schema_values.tolerations() | indent(4) }}

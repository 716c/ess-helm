# Copyright 2024 New Vector Ltd
#
# SPDX-License-Identifier: AGPL-3.0-only OR LicenseRef-Element-Commercial

name: Helm Chart packaging and releasing
on:
  pull_request:
  push:
    branches:
    - main
    tags:
    - '[0-9]+\.[0-9]+\.[0-9]+'
  workflow_dispatch:

jobs:
  helm-package:
    permissions:
      contents: read
      packages: write
    runs-on: cpu-s
    container:
      image: ghcr.io/${{ github.repository }}/ci-runner
      credentials:
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Define a cache for the virtual environment based on the dependencies lock file
      uses: actions/cache@v3
      with:
        path: ./.venv
        key: venv-${{ hashFiles('poetry.lock') }}

    - name: Install venv
      run: |
        # helm/chart-testing-action sets up its own venv that we have no control over
        # We don't want to use it for this
        unset VIRTUAL_ENV
        # Or future actions
        poetry_venv=$(poetry env info -p)
        sed -i "s|^VIRTUAL_ENV=.*|VIRTUAL_ENV=$poetry_venv|" "${GITHUB_ENV}"

        poetry env info
        poetry install -n
        echo "$(poetry env info -p)/bin" >> "${GITHUB_PATH}"

    - name: Set version
      run: |
        if [ "$GITHUB_REF_TYPE" = "tag" ]; then
          scripts/set_chart_version.sh "$GITHUB_REF_NAME"
        elif [ "$GITHUB_REF_NAME" != "main" ]; then
          # https://github.com/orgs/community/discussions/26325
          if [ "$GITHUB_EVENT_NAME" = "pull_request" ]; then
            actual_pr_head_commit=$(cat $GITHUB_EVENT_PATH | yq --input-format json -r .pull_request.head.sha)
            version=$(yq '.version' charts/matrix-stack/Chart.yaml | sed "s/-dev/-sha$actual_pr_head_commit/")
          else
            version=$(yq '.version' charts/matrix-stack/Chart.yaml | sed "s/-dev/-sha$GITHUB_SHA/")
          fi
          scripts/set_chart_version.sh "$version"
        fi

    - name: Login to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ github.token }}

    - name: Set helm changes annotations
      run: |
        python scripts/towncrier_to_helm_annotation.py charts/matrix-stack

    - name: Generate changelog
      run: |
        version=$(yq '.version' charts/matrix-stack/Chart.yaml)
        # Add changes to CHANGELOG.md, keep files to generate CHANGELOG.latest.md
        towncrier build --version $version --keep
        # in empty file
        sed -i "s/CHANGELOG.md/CHANGELOG.latest.md/" pyproject.toml
        towncrier build --version $version --yes
        sed -i "s/CHANGELOG.latest.md/CHANGELOG.md/" pyproject.toml

    - name: Helm package
      run: |
        cd charts/matrix-stack
        helm package .

        helm push matrix-stack-*.tgz oci://ghcr.io/${{ github.repository }}

    - uses: actions/upload-artifact@v4
      with:
        name: helm-package
        path: |
          charts/matrix-stack/*.tgz*
          CHANGELOG.md
          CHANGELOG.latest.md
        retention-days: 1

  release:
    if: ${{ !failure() && !cancelled() && startsWith(github.ref, 'refs/tags/') }}
    permissions:
      contents: write
      packages: read
      pull-requests: write
    needs:
    - helm-package
    runs-on: cpu-s
    container:
      image: ghcr.io/${{ github.repository }}/ci-runner
      credentials:
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Grab packaged chart
      uses: actions/download-artifact@v4
      with:
        name: helm-package
        path: ./

    - name: Calculate versions
      id: versions
      run: |
        this_version=$(ls charts/matrix-stack/matrix-stack-*.tgz | sed 's/.*matrix-stack-//;s/.tgz//')
        next_version=$(echo $this_version | sed 's/-dev//' | awk -F'[ .]' '{print $1"."$2"."$3+1"-dev"}')
        scripts/set_chart_version.sh "$next_version"

        echo "this-version=$this_version" >> $GITHUB_OUTPUT
        echo "next-version=$next_version" >> $GITHUB_OUTPUT

    - name: Remove latest changelog
      run: |
        rm CHANGELOG.latest.md
        rm newsfragments/*.md
        touch newsfragments/.gitkeep

    - name: Release
      uses: softprops/action-gh-release@v2
      with:
        draft: true
        body_path: CHANGELOG.latest.md
        files: charts/matrix-stack/matrix-stack*.tgz*
        fail_on_unmatched_files: true
        # This could simply be omitted if we didn't want to test without a tag
        tag_name: "${{ steps.versions.outputs.this-version }}"

    - name: Create PR for next patch version
      uses: peter-evans/create-pull-request@v7
      with:
        branch: "gha/bump-to-${{ steps.versions.outputs.next-version }}"
        base: "main"
        commit-message: "Bump chart version to ${{ steps.versions.outputs.next-version }}"
        title: "Bump chart version to ${{ steps.versions.outputs.next-version }} after release"
        labels: automated,version-bump
        body: |
          ${{ steps.versions.outputs.this-version }} has just been released.
          This PR prepares the chart & dependencies for the next release:
          ${{ steps.versions.outputs.next-version }}.

          The target branch may be wrong. In which case this PR should be taken over and manually adjusted.
